import { environment as e, exit as r, stderr as a, stdin as t, stdout as s, terminalInput as o, terminalOutput as c, terminalStderr as n, terminalStdin as i, terminalStdout as l } from "/components/preview2-shim/cli.js"; import { monotonicClock as d, wallClock as b } from "/components/preview2-shim/clocks.js"; import { preopens as A, types as k } from "/components/preview2-shim/filesystem.js"; import { error as f, streams as p } from "/components/preview2-shim/io.js"; import { random as w } from "/components/preview2-shim/random.js"; const { getEnvironment: v } = e, { exit: u } = r, { getStderr: g } = a, { getStdin: m } = t, { getStdout: y } = s, { TerminalInput: h } = o, { TerminalOutput: I } = c, { getTerminalStderr: E } = n, { getTerminalStdin: R } = i, { getTerminalStdout: C } = l, { now: X } = d, { now: Z } = b, { getDirectories: B } = A, { Descriptor: Q, DirectoryEntryStream: N, filesystemErrorCode: W } = k, { Error: U } = f, { InputStream: L, OutputStream: T } = p, { getRandomBytes: Y } = w, z = e => WebAssembly.compile("undefined" != typeof Buffer ? Buffer.from(e, "base64") : Uint8Array.from(atob(e), (e => e.charCodeAt(0)))); class ComponentError extends Error { constructor(e) { const r = "string" != typeof e; super(r ? e + "" + " (see error.payload)" : e), Object.defineProperty(this, "payload", { value: e, enumerable: r }) } } let V = new DataView(new ArrayBuffer); const j = e => V.buffer === e.buffer ? V : V = new DataView(e.buffer), F = "undefined" != typeof process && process.versions && process.versions.node; let M; async function G(e) { return F ? (M = M || await import("fs/promises"), WebAssembly.compile(await M.readFile(e))) : fetch(e).then(WebAssembly.compileStreaming) } function S(e) { return e && J.call(e, "payload") ? e.payload : e } const J = Object.prototype.hasOwnProperty, _ = WebAssembly.instantiate, x = (Symbol("resource"), Symbol.dispose || Symbol.for("dispose")), H = e => BigInt.asUintN(64, BigInt(e)); function O(e) { return e >>> 0 } const D = new TextDecoder, $ = new TextEncoder; let q, K, P, ee, re, ae, te, se, oe, ce = 0; function ne(e, r, a) { if ("string" != typeof e) throw new TypeError("expected a string"); if (0 === e.length) return ce = 0, 1; let t = 0, s = 0, o = 0; for (; e.length > 0;) { s = r(s, t, 1, t += 2 * e.length); const { read: c, written: n } = $.encodeInto(e, new Uint8Array(a.buffer, s + o, t - o)); o += n, e = e.slice(c) } return ce = o, s } function ie() { const e = X(); return H(e) } function le() { const e = g(); if (!(e instanceof T)) throw Error('Resource error: Not a valid "OutputStream" resource.'); var r = He++; return xe.set(r, { rep: e, own: !0 }), r } function de(e) { let r; switch (e) { case 0: r = { tag: "ok", val: void 0 }; break; case 1: r = { tag: "err", val: void 0 }; break; default: throw new TypeError("invalid variant discriminant for expected") }u(r) } function be() { const e = m(); if (!(e instanceof L)) throw Error('Resource error: Not a valid "InputStream" resource.'); var r = _e++; return Je.set(r, { rep: e, own: !0 }), r } function Ae() { const e = y(); if (!(e instanceof T)) throw Error('Resource error: Not a valid "OutputStream" resource.'); var r = He++; return xe.set(r, { rep: e, own: !0 }), r } function ke(e) { var r = B(), a = r.length, t = re(0, 0, 4, 12 * a); for (let e = 0; e < r.length; e++) { const a = r[e], l = t + 12 * e; var [s, o] = a; if (!(s instanceof Q)) throw Error('Resource error: Not a valid "Descriptor" resource.'); var c = Pe++; Ke.set(c, { rep: s, own: !0 }), j(ee).setInt32(l + 0, c, !0); var n = ne(o, re, ee), i = ce; j(ee).setInt32(l + 8, i, !0), j(ee).setInt32(l + 4, n, !0) } j(ee).setInt32(e + 4, a, !0), j(ee).setInt32(e + 0, t, !0) } function fe(e) { const r = Z(); var { seconds: a, nanoseconds: t } = r; j(ee).setBigInt64(e + 0, H(a), !0), j(ee).setInt32(e + 8, O(t), !0) } function pe(e, r, a) { var t = e, s = Ke.get(t).rep; let o; try { o = { tag: "ok", val: Q.prototype.readViaStream.call(s, BigInt.asUintN(64, r)) } } catch (e) { o = { tag: "err", val: S(e) } } var c = o; switch (c.tag) { case "ok": { const e = c.val; if (j(ee).setInt8(a + 0, 0, !0), !(e instanceof L)) throw Error('Resource error: Not a valid "InputStream" resource.'); var n = _e++; Je.set(n, { rep: e, own: !0 }), j(ee).setInt32(a + 4, n, !0); break } case "err": { const e = c.val; j(ee).setInt8(a + 0, 1, !0); var i = e; let r; switch (i) { case "access": r = 0; break; case "would-block": r = 1; break; case "already": r = 2; break; case "bad-descriptor": r = 3; break; case "busy": r = 4; break; case "deadlock": r = 5; break; case "quota": r = 6; break; case "exist": r = 7; break; case "file-too-large": r = 8; break; case "illegal-byte-sequence": r = 9; break; case "in-progress": r = 10; break; case "interrupted": r = 11; break; case "invalid": r = 12; break; case "io": r = 13; break; case "is-directory": r = 14; break; case "loop": r = 15; break; case "too-many-links": r = 16; break; case "message-size": r = 17; break; case "name-too-long": r = 18; break; case "no-device": r = 19; break; case "no-entry": r = 20; break; case "no-lock": r = 21; break; case "insufficient-memory": r = 22; break; case "insufficient-space": r = 23; break; case "not-directory": r = 24; break; case "not-empty": r = 25; break; case "not-recoverable": r = 26; break; case "unsupported": r = 27; break; case "no-tty": r = 28; break; case "no-such-device": r = 29; break; case "overflow": r = 30; break; case "not-permitted": r = 31; break; case "pipe": r = 32; break; case "read-only": r = 33; break; case "invalid-seek": r = 34; break; case "text-file-busy": r = 35; break; case "cross-device": r = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${i}" is not one of the cases of error-code`) }j(ee).setInt8(a + 4, r, !0); break } default: throw new TypeError("invalid variant specified for result") } } function we(e, r, a) { var t = e, s = Ke.get(t).rep; let o; try { o = { tag: "ok", val: Q.prototype.writeViaStream.call(s, BigInt.asUintN(64, r)) } } catch (e) { o = { tag: "err", val: S(e) } } var c = o; switch (c.tag) { case "ok": { const e = c.val; if (j(ee).setInt8(a + 0, 0, !0), !(e instanceof T)) throw Error('Resource error: Not a valid "OutputStream" resource.'); var n = He++; xe.set(n, { rep: e, own: !0 }), j(ee).setInt32(a + 4, n, !0); break } case "err": { const e = c.val; j(ee).setInt8(a + 0, 1, !0); var i = e; let r; switch (i) { case "access": r = 0; break; case "would-block": r = 1; break; case "already": r = 2; break; case "bad-descriptor": r = 3; break; case "busy": r = 4; break; case "deadlock": r = 5; break; case "quota": r = 6; break; case "exist": r = 7; break; case "file-too-large": r = 8; break; case "illegal-byte-sequence": r = 9; break; case "in-progress": r = 10; break; case "interrupted": r = 11; break; case "invalid": r = 12; break; case "io": r = 13; break; case "is-directory": r = 14; break; case "loop": r = 15; break; case "too-many-links": r = 16; break; case "message-size": r = 17; break; case "name-too-long": r = 18; break; case "no-device": r = 19; break; case "no-entry": r = 20; break; case "no-lock": r = 21; break; case "insufficient-memory": r = 22; break; case "insufficient-space": r = 23; break; case "not-directory": r = 24; break; case "not-empty": r = 25; break; case "not-recoverable": r = 26; break; case "unsupported": r = 27; break; case "no-tty": r = 28; break; case "no-such-device": r = 29; break; case "overflow": r = 30; break; case "not-permitted": r = 31; break; case "pipe": r = 32; break; case "read-only": r = 33; break; case "invalid-seek": r = 34; break; case "text-file-busy": r = 35; break; case "cross-device": r = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${i}" is not one of the cases of error-code`) }j(ee).setInt8(a + 4, r, !0); break } default: throw new TypeError("invalid variant specified for result") } } function ve(e, r) { var a = e, t = Ke.get(a).rep; let s; try { s = { tag: "ok", val: Q.prototype.appendViaStream.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": { const e = o.val; if (j(ee).setInt8(r + 0, 0, !0), !(e instanceof T)) throw Error('Resource error: Not a valid "OutputStream" resource.'); var c = He++; xe.set(c, { rep: e, own: !0 }), j(ee).setInt32(r + 4, c, !0); break } case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var n = e; let a; switch (n) { case "access": a = 0; break; case "would-block": a = 1; break; case "already": a = 2; break; case "bad-descriptor": a = 3; break; case "busy": a = 4; break; case "deadlock": a = 5; break; case "quota": a = 6; break; case "exist": a = 7; break; case "file-too-large": a = 8; break; case "illegal-byte-sequence": a = 9; break; case "in-progress": a = 10; break; case "interrupted": a = 11; break; case "invalid": a = 12; break; case "io": a = 13; break; case "is-directory": a = 14; break; case "loop": a = 15; break; case "too-many-links": a = 16; break; case "message-size": a = 17; break; case "name-too-long": a = 18; break; case "no-device": a = 19; break; case "no-entry": a = 20; break; case "no-lock": a = 21; break; case "insufficient-memory": a = 22; break; case "insufficient-space": a = 23; break; case "not-directory": a = 24; break; case "not-empty": a = 25; break; case "not-recoverable": a = 26; break; case "unsupported": a = 27; break; case "no-tty": a = 28; break; case "no-such-device": a = 29; break; case "overflow": a = 30; break; case "not-permitted": a = 31; break; case "pipe": a = 32; break; case "read-only": a = 33; break; case "invalid-seek": a = 34; break; case "text-file-busy": a = 35; break; case "cross-device": a = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${n}" is not one of the cases of error-code`) }j(ee).setInt8(r + 4, a, !0); break } default: throw new TypeError("invalid variant specified for result") } } function ue(e, r) { var a = e, t = Ke.get(a).rep; let s; try { s = { tag: "ok", val: Q.prototype.getFlags.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": { const e = o.val; j(ee).setInt8(r + 0, 0, !0); let a = 0; if ("object" == typeof e && null !== e) a = !!e.read << 0 | !!e.write << 1 | !!e.fileIntegritySync << 2 | !!e.dataIntegritySync << 3 | !!e.requestedWriteSync << 4 | !!e.mutateDirectory << 5; else if (null != e) throw new TypeError("only an object, undefined or null can be converted to flags"); j(ee).setInt8(r + 1, a, !0); break } case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var c = e; let a; switch (c) { case "access": a = 0; break; case "would-block": a = 1; break; case "already": a = 2; break; case "bad-descriptor": a = 3; break; case "busy": a = 4; break; case "deadlock": a = 5; break; case "quota": a = 6; break; case "exist": a = 7; break; case "file-too-large": a = 8; break; case "illegal-byte-sequence": a = 9; break; case "in-progress": a = 10; break; case "interrupted": a = 11; break; case "invalid": a = 12; break; case "io": a = 13; break; case "is-directory": a = 14; break; case "loop": a = 15; break; case "too-many-links": a = 16; break; case "message-size": a = 17; break; case "name-too-long": a = 18; break; case "no-device": a = 19; break; case "no-entry": a = 20; break; case "no-lock": a = 21; break; case "insufficient-memory": a = 22; break; case "insufficient-space": a = 23; break; case "not-directory": a = 24; break; case "not-empty": a = 25; break; case "not-recoverable": a = 26; break; case "unsupported": a = 27; break; case "no-tty": a = 28; break; case "no-such-device": a = 29; break; case "overflow": a = 30; break; case "not-permitted": a = 31; break; case "pipe": a = 32; break; case "read-only": a = 33; break; case "invalid-seek": a = 34; break; case "text-file-busy": a = 35; break; case "cross-device": a = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${c}" is not one of the cases of error-code`) }j(ee).setInt8(r + 1, a, !0); break } default: throw new TypeError("invalid variant specified for result") } } function ge(e, r) { var a = e, t = Ke.get(a).rep; let s; try { s = { tag: "ok", val: Q.prototype.getType.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": { const e = o.val; j(ee).setInt8(r + 0, 0, !0); var c = e; let a; switch (c) { case "unknown": a = 0; break; case "block-device": a = 1; break; case "character-device": a = 2; break; case "directory": a = 3; break; case "fifo": a = 4; break; case "symbolic-link": a = 5; break; case "regular-file": a = 6; break; case "socket": a = 7; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${c}" is not one of the cases of descriptor-type`) }j(ee).setInt8(r + 1, a, !0); break } case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var n = e; let a; switch (n) { case "access": a = 0; break; case "would-block": a = 1; break; case "already": a = 2; break; case "bad-descriptor": a = 3; break; case "busy": a = 4; break; case "deadlock": a = 5; break; case "quota": a = 6; break; case "exist": a = 7; break; case "file-too-large": a = 8; break; case "illegal-byte-sequence": a = 9; break; case "in-progress": a = 10; break; case "interrupted": a = 11; break; case "invalid": a = 12; break; case "io": a = 13; break; case "is-directory": a = 14; break; case "loop": a = 15; break; case "too-many-links": a = 16; break; case "message-size": a = 17; break; case "name-too-long": a = 18; break; case "no-device": a = 19; break; case "no-entry": a = 20; break; case "no-lock": a = 21; break; case "insufficient-memory": a = 22; break; case "insufficient-space": a = 23; break; case "not-directory": a = 24; break; case "not-empty": a = 25; break; case "not-recoverable": a = 26; break; case "unsupported": a = 27; break; case "no-tty": a = 28; break; case "no-such-device": a = 29; break; case "overflow": a = 30; break; case "not-permitted": a = 31; break; case "pipe": a = 32; break; case "read-only": a = 33; break; case "invalid-seek": a = 34; break; case "text-file-busy": a = 35; break; case "cross-device": a = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${n}" is not one of the cases of error-code`) }j(ee).setInt8(r + 1, a, !0); break } default: throw new TypeError("invalid variant specified for result") } } function me(e, r) { var a = e, t = Ke.get(a).rep; let s; try { s = { tag: "ok", val: Q.prototype.stat.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": { const e = o.val; j(ee).setInt8(r + 0, 0, !0); var { type: c, linkCount: n, size: i, dataAccessTimestamp: l, dataModificationTimestamp: d, statusChangeTimestamp: b } = e, A = c; let a; switch (A) { case "unknown": a = 0; break; case "block-device": a = 1; break; case "character-device": a = 2; break; case "directory": a = 3; break; case "fifo": a = 4; break; case "symbolic-link": a = 5; break; case "regular-file": a = 6; break; case "socket": a = 7; break; default: throw c instanceof Error && console.error(c), new TypeError(`"${A}" is not one of the cases of descriptor-type`) }j(ee).setInt8(r + 8, a, !0), j(ee).setBigInt64(r + 16, H(n), !0), j(ee).setBigInt64(r + 24, H(i), !0); var k = l; if (null == k) j(ee).setInt8(r + 32, 0, !0); else { const e = k; j(ee).setInt8(r + 32, 1, !0); var { seconds: f, nanoseconds: p } = e; j(ee).setBigInt64(r + 40, H(f), !0), j(ee).setInt32(r + 48, O(p), !0) } var w = d; if (null == w) j(ee).setInt8(r + 56, 0, !0); else { const e = w; j(ee).setInt8(r + 56, 1, !0); var { seconds: v, nanoseconds: u } = e; j(ee).setBigInt64(r + 64, H(v), !0), j(ee).setInt32(r + 72, O(u), !0) } var g = b; if (null == g) j(ee).setInt8(r + 80, 0, !0); else { const e = g; j(ee).setInt8(r + 80, 1, !0); var { seconds: m, nanoseconds: y } = e; j(ee).setBigInt64(r + 88, H(m), !0), j(ee).setInt32(r + 96, O(y), !0) } break } case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var h = e; let a; switch (h) { case "access": a = 0; break; case "would-block": a = 1; break; case "already": a = 2; break; case "bad-descriptor": a = 3; break; case "busy": a = 4; break; case "deadlock": a = 5; break; case "quota": a = 6; break; case "exist": a = 7; break; case "file-too-large": a = 8; break; case "illegal-byte-sequence": a = 9; break; case "in-progress": a = 10; break; case "interrupted": a = 11; break; case "invalid": a = 12; break; case "io": a = 13; break; case "is-directory": a = 14; break; case "loop": a = 15; break; case "too-many-links": a = 16; break; case "message-size": a = 17; break; case "name-too-long": a = 18; break; case "no-device": a = 19; break; case "no-entry": a = 20; break; case "no-lock": a = 21; break; case "insufficient-memory": a = 22; break; case "insufficient-space": a = 23; break; case "not-directory": a = 24; break; case "not-empty": a = 25; break; case "not-recoverable": a = 26; break; case "unsupported": a = 27; break; case "no-tty": a = 28; break; case "no-such-device": a = 29; break; case "overflow": a = 30; break; case "not-permitted": a = 31; break; case "pipe": a = 32; break; case "read-only": a = 33; break; case "invalid-seek": a = 34; break; case "text-file-busy": a = 35; break; case "cross-device": a = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${h}" is not one of the cases of error-code`) }j(ee).setInt8(r + 8, a, !0); break } default: throw new TypeError("invalid variant specified for result") } } function ye(e, r) { var a = e, t = Ge.get(a).rep; var s = W(t); if (null == s) j(ee).setInt8(r + 0, 0, !0); else { const e = s; j(ee).setInt8(r + 0, 1, !0); var o = e; let a; switch (o) { case "access": a = 0; break; case "would-block": a = 1; break; case "already": a = 2; break; case "bad-descriptor": a = 3; break; case "busy": a = 4; break; case "deadlock": a = 5; break; case "quota": a = 6; break; case "exist": a = 7; break; case "file-too-large": a = 8; break; case "illegal-byte-sequence": a = 9; break; case "in-progress": a = 10; break; case "interrupted": a = 11; break; case "invalid": a = 12; break; case "io": a = 13; break; case "is-directory": a = 14; break; case "loop": a = 15; break; case "too-many-links": a = 16; break; case "message-size": a = 17; break; case "name-too-long": a = 18; break; case "no-device": a = 19; break; case "no-entry": a = 20; break; case "no-lock": a = 21; break; case "insufficient-memory": a = 22; break; case "insufficient-space": a = 23; break; case "not-directory": a = 24; break; case "not-empty": a = 25; break; case "not-recoverable": a = 26; break; case "unsupported": a = 27; break; case "no-tty": a = 28; break; case "no-such-device": a = 29; break; case "overflow": a = 30; break; case "not-permitted": a = 31; break; case "pipe": a = 32; break; case "read-only": a = 33; break; case "invalid-seek": a = 34; break; case "text-file-busy": a = 35; break; case "cross-device": a = 36; break; default: throw e instanceof Error && console.error(e), new TypeError(`"${o}" is not one of the cases of error-code`) }j(ee).setInt8(r + 1, a, !0) } } function he(e, r, a) { var t = e, s = Je.get(t).rep; let o; try { o = { tag: "ok", val: L.prototype.read.call(s, BigInt.asUintN(64, r)) } } catch (e) { o = { tag: "err", val: S(e) } } var c = o; switch (c.tag) { case "ok": { const e = c.val; j(ee).setInt8(a + 0, 0, !0); var n = e, i = n.byteLength, l = re(0, 0, 1, 1 * i), d = new Uint8Array(n.buffer || n, n.byteOffset, 1 * i); new Uint8Array(ee.buffer, l, 1 * i).set(d), j(ee).setInt32(a + 8, i, !0), j(ee).setInt32(a + 4, l, !0); break } case "err": { const e = c.val; j(ee).setInt8(a + 0, 1, !0); var b = e; switch (b.tag) { case "last-operation-failed": { const e = b.val; if (j(ee).setInt8(a + 4, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var A = Se++; Ge.set(A, { rep: e, own: !0 }), j(ee).setInt32(a + 8, A, !0); break } case "closed": j(ee).setInt8(a + 4, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(b.tag)}\` (received \`${b}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Ie(e, r, a) { var t = e, s = Je.get(t).rep; let o; try { o = { tag: "ok", val: L.prototype.blockingRead.call(s, BigInt.asUintN(64, r)) } } catch (e) { o = { tag: "err", val: S(e) } } var c = o; switch (c.tag) { case "ok": { const e = c.val; j(ee).setInt8(a + 0, 0, !0); var n = e, i = n.byteLength, l = re(0, 0, 1, 1 * i), d = new Uint8Array(n.buffer || n, n.byteOffset, 1 * i); new Uint8Array(ee.buffer, l, 1 * i).set(d), j(ee).setInt32(a + 8, i, !0), j(ee).setInt32(a + 4, l, !0); break } case "err": { const e = c.val; j(ee).setInt8(a + 0, 1, !0); var b = e; switch (b.tag) { case "last-operation-failed": { const e = b.val; if (j(ee).setInt8(a + 4, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var A = Se++; Ge.set(A, { rep: e, own: !0 }), j(ee).setInt32(a + 8, A, !0); break } case "closed": j(ee).setInt8(a + 4, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(b.tag)}\` (received \`${b}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Ee(e, r) { var a = e, t = xe.get(a).rep; let s; try { s = { tag: "ok", val: T.prototype.checkWrite.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": { const e = o.val; j(ee).setInt8(r + 0, 0, !0), j(ee).setBigInt64(r + 8, H(e), !0); break } case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var c = e; switch (c.tag) { case "last-operation-failed": { const e = c.val; if (j(ee).setInt8(r + 8, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var n = Se++; Ge.set(n, { rep: e, own: !0 }), j(ee).setInt32(r + 12, n, !0); break } case "closed": j(ee).setInt8(r + 8, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(c.tag)}\` (received \`${c}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Re(e, r, a, t) { var s = e, o = xe.get(s).rep, c = r, n = a, i = new Uint8Array(ee.buffer.slice(c, c + 1 * n)); let l; try { l = { tag: "ok", val: T.prototype.write.call(o, i) } } catch (e) { l = { tag: "err", val: S(e) } } var d = l; switch (d.tag) { case "ok": d.val; j(ee).setInt8(t + 0, 0, !0); break; case "err": { const e = d.val; j(ee).setInt8(t + 0, 1, !0); var b = e; switch (b.tag) { case "last-operation-failed": { const e = b.val; if (j(ee).setInt8(t + 4, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var A = Se++; Ge.set(A, { rep: e, own: !0 }), j(ee).setInt32(t + 8, A, !0); break } case "closed": j(ee).setInt8(t + 4, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(b.tag)}\` (received \`${b}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Ce(e, r, a, t) { var s = e, o = xe.get(s).rep, c = r, n = a, i = new Uint8Array(ee.buffer.slice(c, c + 1 * n)); let l; try { l = { tag: "ok", val: T.prototype.blockingWriteAndFlush.call(o, i) } } catch (e) { l = { tag: "err", val: S(e) } } var d = l; switch (d.tag) { case "ok": d.val; j(ee).setInt8(t + 0, 0, !0); break; case "err": { const e = d.val; j(ee).setInt8(t + 0, 1, !0); var b = e; switch (b.tag) { case "last-operation-failed": { const e = b.val; if (j(ee).setInt8(t + 4, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var A = Se++; Ge.set(A, { rep: e, own: !0 }), j(ee).setInt32(t + 8, A, !0); break } case "closed": j(ee).setInt8(t + 4, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(b.tag)}\` (received \`${b}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Xe(e, r) { var a = e, t = xe.get(a).rep; let s; try { s = { tag: "ok", val: T.prototype.blockingFlush.call(t) } } catch (e) { s = { tag: "err", val: S(e) } } var o = s; switch (o.tag) { case "ok": o.val; j(ee).setInt8(r + 0, 0, !0); break; case "err": { const e = o.val; j(ee).setInt8(r + 0, 1, !0); var c = e; switch (c.tag) { case "last-operation-failed": { const e = c.val; if (j(ee).setInt8(r + 4, 0, !0), !(e instanceof U)) throw Error('Resource error: Not a valid "Error" resource.'); var n = Se++; Ge.set(n, { rep: e, own: !0 }), j(ee).setInt32(r + 8, n, !0); break } case "closed": j(ee).setInt8(r + 4, 1, !0); break; default: throw new TypeError(`invalid variant tag value \`${JSON.stringify(c.tag)}\` (received \`${c}\`) specified for \`StreamError\``) }break } default: throw new TypeError("invalid variant specified for result") } } function Ze(e, r) { var a = Y(BigInt.asUintN(64, e)), t = a.byteLength, s = re(0, 0, 1, 1 * t), o = new Uint8Array(a.buffer || a, a.byteOffset, 1 * t); new Uint8Array(ee.buffer, s, 1 * t).set(o), j(ee).setInt32(r + 4, t, !0), j(ee).setInt32(r + 0, s, !0) } function Be(e) { var r = v(), a = r.length, t = re(0, 0, 4, 16 * a); for (let e = 0; e < r.length; e++) { const a = r[e], d = t + 16 * e; var [s, o] = a, c = ne(s, re, ee), n = ce; j(ee).setInt32(d + 4, n, !0), j(ee).setInt32(d + 0, c, !0); var i = ne(o, re, ee), l = ce; j(ee).setInt32(d + 12, l, !0), j(ee).setInt32(d + 8, i, !0) } j(ee).setInt32(e + 4, a, !0), j(ee).setInt32(e + 0, t, !0) } function Qe(e) { var r = R(); if (null == r) j(ee).setInt8(e + 0, 0, !0); else { const t = r; if (j(ee).setInt8(e + 0, 1, !0), !(t instanceof h)) throw Error('Resource error: Not a valid "TerminalInput" resource.'); var a = De++; Oe.set(a, { rep: t, own: !0 }), j(ee).setInt32(e + 4, a, !0) } } function Ne(e) { var r = C(); if (null == r) j(ee).setInt8(e + 0, 0, !0); else { const t = r; if (j(ee).setInt8(e + 0, 1, !0), !(t instanceof I)) throw Error('Resource error: Not a valid "TerminalOutput" resource.'); var a = qe++; $e.set(a, { rep: t, own: !0 }), j(ee).setInt32(e + 4, a, !0) } } function We(e) { var r = E(); if (null == r) j(ee).setInt8(e + 0, 0, !0); else { const t = r; if (j(ee).setInt8(e + 0, 1, !0), !(t instanceof I)) throw Error('Resource error: Not a valid "TerminalOutput" resource.'); var a = qe++; $e.set(a, { rep: t, own: !0 }), j(ee).setInt32(e + 4, a, !0) } } function Ue(e) { const r = er.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); er.delete(e), r.own && r.rep[x] && r.rep[x]() } function Le(e) { const r = Ge.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); Ge.delete(e), r.own && r.rep[x] && r.rep[x]() } function Te(e) { const r = Je.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); Je.delete(e), r.own && r.rep[x] && r.rep[x]() } function Ye(e) { const r = xe.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); xe.delete(e), r.own && r.rep[x] && r.rep[x]() } function ze(e) { const r = Ke.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); Ke.delete(e), r.own && r.rep[x] && r.rep[x]() } function Ve(e) { const r = $e.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); $e.delete(e), r.own && r.rep[x] && r.rep[x]() } function je(e) { const r = Oe.get(e); if (!r) throw Error("Resource error: Invalid handle " + e); Oe.delete(e), r.own && r.rep[x] && r.rep[x]() } function Fe(e) { var r = ne(e, te, ee), a = ce; const t = K["process-markdown-to-html"](r, a); let s; switch (j(ee).getUint8(t + 0, !0)) { case 0: { let e; switch (j(ee).getUint8(t + 4, !0)) { case 0: e = void 0; break; case 1: var o = j(ee).getInt32(t + 8, !0), c = j(ee).getInt32(t + 12, !0); e = D.decode(new Uint8Array(ee.buffer, o, c)); break; default: throw new TypeError("invalid variant discriminant for option") }var n = j(ee).getInt32(t + 16, !0), i = j(ee).getInt32(t + 20, !0), l = D.decode(new Uint8Array(ee.buffer, n, i)); let r; switch (j(ee).getUint8(t + 24, !0)) { case 0: r = void 0; break; case 1: { let e, a; switch (j(ee).getUint8(t + 28, !0)) { case 0: e = void 0; break; case 1: var d = j(ee).getInt32(t + 32, !0), b = j(ee).getInt32(t + 36, !0); e = D.decode(new Uint8Array(ee.buffer, d, b)); break; default: throw new TypeError("invalid variant discriminant for option") }switch (j(ee).getUint8(t + 40, !0)) { case 0: a = void 0; break; case 1: { let e; switch (j(ee).getUint8(t + 44, !0)) { case 0: e = void 0; break; case 1: var A = j(ee).getInt32(t + 48, !0), k = j(ee).getInt32(t + 52, !0); e = D.decode(new Uint8Array(ee.buffer, A, k)); break; default: throw new TypeError("invalid variant discriminant for option") }var f = j(ee).getInt32(t + 56, !0), p = j(ee).getInt32(t + 60, !0); a = { language: e, source: D.decode(new Uint8Array(ee.buffer, f, p)) }; break } default: throw new TypeError("invalid variant discriminant for option") }r = { title: e, codeBlock: a }; break } default: throw new TypeError("invalid variant discriminant for option") }s = { tag: "ok", val: { toc: e, content: l, frontmatter: r } }; break } case 1: { let e; switch (j(ee).getUint8(t + 4, !0)) { case 0: e = { tag: "nolang" }; break; case 1: e = { tag: "nohighlighter" }; break; case 2: var w = j(ee).getInt32(t + 8, !0), v = j(ee).getInt32(t + 12, !0); e = { tag: "could-not-build-highlighter", val: D.decode(new Uint8Array(ee.buffer, w, v)) }; break; case 3: var u = j(ee).getInt32(t + 8, !0), g = j(ee).getInt32(t + 12, !0); e = { tag: "string-generation-error", val: D.decode(new Uint8Array(ee.buffer, u, g)) }; break; default: throw new TypeError("invalid variant discriminant for HighlightError") }s = { tag: "err", val: e }; break } default: throw new TypeError("invalid variant discriminant for expected") }if (se(t), "err" === s.tag) throw new ComponentError(s.val); return s.val } function Me(e) { var r = ne(e, te, ee), a = ce; const t = K["process-markdown-to-html-with-frontmatter"](r, a); let s; switch (j(ee).getUint8(t + 0, !0)) { case 0: { let e; switch (j(ee).getUint8(t + 4, !0)) { case 0: e = void 0; break; case 1: var o = j(ee).getInt32(t + 8, !0), c = j(ee).getInt32(t + 12, !0); e = D.decode(new Uint8Array(ee.buffer, o, c)); break; default: throw new TypeError("invalid variant discriminant for option") }var n = j(ee).getInt32(t + 16, !0), i = j(ee).getInt32(t + 20, !0), l = D.decode(new Uint8Array(ee.buffer, n, i)); let r; switch (j(ee).getUint8(t + 24, !0)) { case 0: r = void 0; break; case 1: { let e, a; switch (j(ee).getUint8(t + 28, !0)) { case 0: e = void 0; break; case 1: var d = j(ee).getInt32(t + 32, !0), b = j(ee).getInt32(t + 36, !0); e = D.decode(new Uint8Array(ee.buffer, d, b)); break; default: throw new TypeError("invalid variant discriminant for option") }switch (j(ee).getUint8(t + 40, !0)) { case 0: a = void 0; break; case 1: { let e; switch (j(ee).getUint8(t + 44, !0)) { case 0: e = void 0; break; case 1: var A = j(ee).getInt32(t + 48, !0), k = j(ee).getInt32(t + 52, !0); e = D.decode(new Uint8Array(ee.buffer, A, k)); break; default: throw new TypeError("invalid variant discriminant for option") }var f = j(ee).getInt32(t + 56, !0), p = j(ee).getInt32(t + 60, !0); a = { language: e, source: D.decode(new Uint8Array(ee.buffer, f, p)) }; break } default: throw new TypeError("invalid variant discriminant for option") }r = { title: e, codeBlock: a }; break } default: throw new TypeError("invalid variant discriminant for option") }s = { tag: "ok", val: { toc: e, content: l, frontmatter: r } }; break } case 1: { let e; switch (j(ee).getUint8(t + 4, !0)) { case 0: e = { tag: "nolang" }; break; case 1: e = { tag: "nohighlighter" }; break; case 2: var w = j(ee).getInt32(t + 8, !0), v = j(ee).getInt32(t + 12, !0); e = { tag: "could-not-build-highlighter", val: D.decode(new Uint8Array(ee.buffer, w, v)) }; break; case 3: var u = j(ee).getInt32(t + 8, !0), g = j(ee).getInt32(t + 12, !0); e = { tag: "string-generation-error", val: D.decode(new Uint8Array(ee.buffer, u, g)) }; break; default: throw new TypeError("invalid variant discriminant for HighlightError") }s = { tag: "err", val: e }; break } default: throw new TypeError("invalid variant discriminant for expected") }if (oe(t), "err" === s.tag) throw new ComponentError(s.val); return s.val } const Ge = new Map; let Se = 0; const Je = new Map; let _e = 0; const xe = new Map; let He = 0; const Oe = new Map; let De = 0; const $e = new Map; let qe = 0; const Ke = new Map; let Pe = 0; const er = new Map; const rr = (async () => { const e = G(new URL("./femark.core.wasm", import.meta.url)), r = G(new URL("./femark.core2.wasm", import.meta.url)), a = z("AGFzbQEAAAABSQxgAX8AYAN/fn8AYAJ/fwBgBH9/f38AYAJ+fwBgAn9/AX9gA39+fwF/YAF/AX9gA39/fwF/YAR/f39/AX9gBH9+f38Bf2ABfwADIiEAAAEBAgICAgIBAQIDAwIEAAAAAAUFBgcFBQUICQoJCwUEBQFwASEhB6cBIgEwAAABMQABATIAAgEzAAMBNAAEATUABQE2AAYBNwAHATgACAE5AAkCMTAACgIxMQALAjEyAAwCMTMADQIxNAAOAjE1AA8CMTYAEAIxNwARAjE4ABICMTkAEwIyMAAUAjIxABUCMjIAFgIyMwAXAjI0ABgCMjUAGQIyNgAaAjI3ABsCMjgAHAIyOQAdAjMwAB4CMzEAHwIzMgAgCCRpbXBvcnRzAQAKnQMhCQAgAEEAEQAACwkAIABBAREAAAsNACAAIAEgAkECEQEACw0AIAAgASACQQMRAQALCwAgACABQQQRAgALCwAgACABQQURAgALCwAgACABQQYRAgALCwAgACABQQcRAgALCwAgACABQQgRAgALDQAgACABIAJBCREBAAsNACAAIAEgAkEKEQEACwsAIAAgAUELEQIACw8AIAAgASACIANBDBEDAAsPACAAIAEgAiADQQ0RAwALCwAgACABQQ4RAgALCwAgACABQQ8RBAALCQAgAEEQEQAACwkAIABBEREAAAsJACAAQRIRAAALCQAgAEETEQAACwsAIAAgAUEUEQUACwsAIAAgAUEVEQUACw0AIAAgASACQRYRBgALCQAgAEEXEQcACwsAIAAgAUEYEQUACwsAIAAgAUEZEQUACwsAIAAgAUEaEQUACw0AIAAgASACQRsRCAALDwAgACABIAIgA0EcEQkACw8AIAAgASACIANBHREKAAsPACAAIAEgAiADQR4RCQALCQAgAEEfEQsACwsAIAAgAUEgEQUACwAvCXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQ13aXQtY29tcG9uZW50BzAuMjAxLjAAuw4EbmFtZQATEndpdC1jb21wb25lbnQ6c2hpbQGeDiEAN2luZGlyZWN0LXdhc2k6ZmlsZXN5c3RlbS9wcmVvcGVuc0AwLjIuMC1nZXQtZGlyZWN0b3JpZXMBKWluZGlyZWN0LXdhc2k6Y2xvY2tzL3dhbGwtY2xvY2tAMC4yLjAtbm93AkdpbmRpcmVjdC13YXNpOmZpbGVzeXN0ZW0vdHlwZXNAMC4yLjAtW21ldGhvZF1kZXNjcmlwdG9yLnJlYWQtdmlhLXN0cmVhbQNIaW5kaXJlY3Qtd2FzaTpmaWxlc3lzdGVtL3R5cGVzQDAuMi4wLVttZXRob2RdZGVzY3JpcHRvci53cml0ZS12aWEtc3RyZWFtBElpbmRpcmVjdC13YXNpOmZpbGVzeXN0ZW0vdHlwZXNAMC4yLjAtW21ldGhvZF1kZXNjcmlwdG9yLmFwcGVuZC12aWEtc3RyZWFtBUFpbmRpcmVjdC13YXNpOmZpbGVzeXN0ZW0vdHlwZXNAMC4yLjAtW21ldGhvZF1kZXNjcmlwdG9yLmdldC1mbGFncwZAaW5kaXJlY3Qtd2FzaTpmaWxlc3lzdGVtL3R5cGVzQDAuMi4wLVttZXRob2RdZGVzY3JpcHRvci5nZXQtdHlwZQc8aW5kaXJlY3Qtd2FzaTpmaWxlc3lzdGVtL3R5cGVzQDAuMi4wLVttZXRob2RdZGVzY3JpcHRvci5zdGF0CDppbmRpcmVjdC13YXNpOmZpbGVzeXN0ZW0vdHlwZXNAMC4yLjAtZmlsZXN5c3RlbS1lcnJvci1jb2RlCThpbmRpcmVjdC13YXNpOmlvL3N0cmVhbXNAMC4yLjAtW21ldGhvZF1pbnB1dC1zdHJlYW0ucmVhZApBaW5kaXJlY3Qtd2FzaTppby9zdHJlYW1zQDAuMi4wLVttZXRob2RdaW5wdXQtc3RyZWFtLmJsb2NraW5nLXJlYWQLQGluZGlyZWN0LXdhc2k6aW8vc3RyZWFtc0AwLjIuMC1bbWV0aG9kXW91dHB1dC1zdHJlYW0uY2hlY2std3JpdGUMOmluZGlyZWN0LXdhc2k6aW8vc3RyZWFtc0AwLjIuMC1bbWV0aG9kXW91dHB1dC1zdHJlYW0ud3JpdGUNTWluZGlyZWN0LXdhc2k6aW8vc3RyZWFtc0AwLjIuMC1bbWV0aG9kXW91dHB1dC1zdHJlYW0uYmxvY2tpbmctd3JpdGUtYW5kLWZsdXNoDkNpbmRpcmVjdC13YXNpOmlvL3N0cmVhbXNAMC4yLjAtW21ldGhvZF1vdXRwdXQtc3RyZWFtLmJsb2NraW5nLWZsdXNoDzJpbmRpcmVjdC13YXNpOnJhbmRvbS9yYW5kb21AMC4yLjAtZ2V0LXJhbmRvbS1ieXRlcxAzaW5kaXJlY3Qtd2FzaTpjbGkvZW52aXJvbm1lbnRAMC4yLjAtZ2V0LWVudmlyb25tZW50ETlpbmRpcmVjdC13YXNpOmNsaS90ZXJtaW5hbC1zdGRpbkAwLjIuMC1nZXQtdGVybWluYWwtc3RkaW4SO2luZGlyZWN0LXdhc2k6Y2xpL3Rlcm1pbmFsLXN0ZG91dEAwLjIuMC1nZXQtdGVybWluYWwtc3Rkb3V0EztpbmRpcmVjdC13YXNpOmNsaS90ZXJtaW5hbC1zdGRlcnJAMC4yLjAtZ2V0LXRlcm1pbmFsLXN0ZGVychQoYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1lbnZpcm9uX2dldBUuYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1lbnZpcm9uX3NpemVzX2dldBYrYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1jbG9ja190aW1lX2dldBclYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1mZF9jbG9zZRgqYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1mZF9mZHN0YXRfZ2V0GTBhZGFwdC13YXNpX3NuYXBzaG90X3ByZXZpZXcxLWZkX2Zkc3RhdF9zZXRfZmxhZ3MaK2FkYXB0LXdhc2lfc25hcHNob3RfcHJldmlldzEtZmRfcHJlc3RhdF9nZXQbMGFkYXB0LXdhc2lfc25hcHNob3RfcHJldmlldzEtZmRfcHJlc3RhdF9kaXJfbmFtZRwkYWRhcHQtd2FzaV9zbmFwc2hvdF9wcmV2aWV3MS1mZF9yZWFkHSRhZGFwdC13YXNpX3NuYXBzaG90X3ByZXZpZXcxLWZkX3NlZWseJWFkYXB0LXdhc2lfc25hcHNob3RfcHJldmlldzEtZmRfd3JpdGUfJmFkYXB0LXdhc2lfc25hcHNob3RfcHJldmlldzEtcHJvY19leGl0ICdhZGFwdC13YXNpX3NuYXBzaG90X3ByZXZpZXcxLXJhbmRvbV9nZXQ"), t = z("AGFzbQEAAAABSQxgAX8AYAN/fn8AYAJ/fwBgBH9/f38AYAJ+fwBgAn9/AX9gA39+fwF/YAF/AX9gA39/fwF/YAR/f39/AX9gBH9+f38Bf2ABfwACzAEiAAEwAAAAATEAAAABMgABAAEzAAEAATQAAgABNQACAAE2AAIAATcAAgABOAACAAE5AAEAAjEwAAEAAjExAAIAAjEyAAMAAjEzAAMAAjE0AAIAAjE1AAQAAjE2AAAAAjE3AAAAAjE4AAAAAjE5AAAAAjIwAAUAAjIxAAUAAjIyAAYAAjIzAAcAAjI0AAUAAjI1AAUAAjI2AAUAAjI3AAgAAjI4AAkAAjI5AAoAAjMwAAkAAjMxAAsAAjMyAAUACCRpbXBvcnRzAXABISEJJwEAQQALIQABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fIAAvCXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQ13aXQtY29tcG9uZW50BzAuMjAxLjAAHARuYW1lABUUd2l0LWNvbXBvbmVudDpmaXh1cHM"); ({ exports: q } = await _(await a)), ({ exports: K } = await _(await e, { wasi_snapshot_preview1: { clock_time_get: q[22], environ_get: q[20], environ_sizes_get: q[21], fd_close: q[23], fd_fdstat_get: q[24], fd_fdstat_set_flags: q[25], fd_prestat_dir_name: q[27], fd_prestat_get: q[26], fd_read: q[28], fd_seek: q[29], fd_write: q[30], proc_exit: q[31], random_get: q[32] } })), ({ exports: P } = await _(await r, { __main_module__: { cabi_realloc: K.cabi_realloc }, env: { memory: K.memory }, "wasi:cli/environment@0.2.0": { "get-environment": q[16] }, "wasi:cli/exit@0.2.0": { exit: de }, "wasi:cli/stderr@0.2.0": { "get-stderr": le }, "wasi:cli/stdin@0.2.0": { "get-stdin": be }, "wasi:cli/stdout@0.2.0": { "get-stdout": Ae }, "wasi:cli/terminal-input@0.2.0": { "[resource-drop]terminal-input": je }, "wasi:cli/terminal-output@0.2.0": { "[resource-drop]terminal-output": Ve }, "wasi:cli/terminal-stderr@0.2.0": { "get-terminal-stderr": q[19] }, "wasi:cli/terminal-stdin@0.2.0": { "get-terminal-stdin": q[17] }, "wasi:cli/terminal-stdout@0.2.0": { "get-terminal-stdout": q[18] }, "wasi:clocks/monotonic-clock@0.2.0": { now: ie }, "wasi:clocks/wall-clock@0.2.0": { now: q[1] }, "wasi:filesystem/preopens@0.2.0": { "get-directories": q[0] }, "wasi:filesystem/types@0.2.0": { "[method]descriptor.append-via-stream": q[4], "[method]descriptor.get-flags": q[5], "[method]descriptor.get-type": q[6], "[method]descriptor.read-via-stream": q[2], "[method]descriptor.stat": q[7], "[method]descriptor.write-via-stream": q[3], "[resource-drop]descriptor": ze, "[resource-drop]directory-entry-stream": Ue, "filesystem-error-code": q[8] }, "wasi:io/error@0.2.0": { "[resource-drop]error": Le }, "wasi:io/streams@0.2.0": { "[method]input-stream.blocking-read": q[10], "[method]input-stream.read": q[9], "[method]output-stream.blocking-flush": q[14], "[method]output-stream.blocking-write-and-flush": q[13], "[method]output-stream.check-write": q[11], "[method]output-stream.write": q[12], "[resource-drop]input-stream": Te, "[resource-drop]output-stream": Ye }, "wasi:random/random@0.2.0": { "get-random-bytes": q[15] } })), ee = K.memory, re = P.cabi_import_realloc, ({ exports: ae } = await _(await t, { "": { $imports: q.$imports, 0: ke, 1: fe, 10: Ie, 11: Ee, 12: Re, 13: Ce, 14: Xe, 15: Ze, 16: Be, 17: Qe, 18: Ne, 19: We, 2: pe, 20: P.environ_get, 21: P.environ_sizes_get, 22: P.clock_time_get, 23: P.fd_close, 24: P.fd_fdstat_get, 25: P.fd_fdstat_set_flags, 26: P.fd_prestat_get, 27: P.fd_prestat_dir_name, 28: P.fd_read, 29: P.fd_seek, 3: we, 30: P.fd_write, 31: P.proc_exit, 32: P.random_get, 4: ve, 5: ue, 6: ge, 7: me, 8: ye, 9: he } })), te = K.cabi_realloc, se = K["cabi_post_process-markdown-to-html"], oe = K["cabi_post_process-markdown-to-html-with-frontmatter"] })(); await rr; export { Fe as processMarkdownToHtml, Me as processMarkdownToHtmlWithFrontmatter };
